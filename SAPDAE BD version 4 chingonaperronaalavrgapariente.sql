-- MySQL Script generated by MySQL Workbench
-- 03/28/17 19:25:08
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema SAPDAE
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SAPDAE` ;

-- -----------------------------------------------------
-- Schema SAPDAE
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SAPDAE` DEFAULT CHARACTER SET utf8 ;
USE `SAPDAE` ;

-- -----------------------------------------------------
-- Table `SAPDAE`.`Nombre_Carrera`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Nombre_Carrera` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Nombre_Carrera` (
  `idNombre_Carrera` INT NOT NULL,
  `Nombre_Carrera` VARCHAR(35) NOT NULL,
  PRIMARY KEY (`idNombre_Carrera`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Asesores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Asesores` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Asesores` (
  `Id_asesor` INT UNSIGNED NOT NULL COMMENT 'Identificador del Asesor. Se es necesario registrarse con este, se da de alta al mismo tiempo que con el asesorado, puesto puede ser asesor y asesorado.\nMatricula o dependiendo la institución',
  `Password` VARCHAR(16) NOT NULL COMMENT 'Contraseña del usuario',
  `Nombre` VARCHAR(60) NOT NULL COMMENT 'Nombre del Usuario',
  `asesor_idNombre_Carrera` INT NOT NULL COMMENT 'Llave foránea para identificar carrera a la que pertenece ',
  `Foto` LONGBLOB NULL COMMENT 'Fotografía del asesor,',
  `Descripcion` VARCHAR(100) NULL COMMENT 'Descripcion en caso de realizarse alguna',
  `ApellidoPaterno` VARCHAR(45) NOT NULL COMMENT 'Apellido Paterno del Asesor',
  `ApellidoMaterno` VARCHAR(45) NULL COMMENT 'Apellido materno del asesor. No es necesario llenarse',
  `NombreCompleto` VARCHAR(100) GENERATED ALWAYS AS (CONCAT(Nombre,' ',ApellidoPaterno,' ', ApellidoMaterno)) VIRTUAL COMMENT 'Columna autogenerada que concatena el nombre y apellidos del usuario.',
  PRIMARY KEY (`Id_asesor`),
  UNIQUE INDEX `Nombre_UNIQUE` (`Nombre` ASC),
  UNIQUE INDEX `idAsesor_UNIQUE` (`Id_asesor` ASC),
  UNIQUE INDEX `AsesPswd_UNIQUE` (`Password` ASC),
  INDEX `fk_Asesores_Nombre_Carrera1_idx` (`asesor_idNombre_Carrera` ASC),
  CONSTRAINT `fk_Asesores_Nombre_Carrera1`
    FOREIGN KEY (`asesor_idNombre_Carrera`)
    REFERENCES `SAPDAE`.`Nombre_Carrera` (`idNombre_Carrera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Asesorado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Asesorado` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Asesorado` (
  `Id_asesorado` INT UNSIGNED NOT NULL COMMENT 'Identificador del Asesorado, se usa la matricula para registrarse.',
  `Contraseña` VARCHAR(16) NOT NULL COMMENT 'Contraseña del Asesorado',
  `asesorado_idNombre_Carrera` INT NOT NULL COMMENT 'Identificador de la llave foranea a la carrera a la que pertenece el asesorado.',
  `Nombre` VARCHAR(60) NOT NULL COMMENT 'Nombre del asesorado',
  `Asesorias` TINYINT(5) NOT NULL DEFAULT 0 COMMENT 'Cantidad de asesorias que cursa',
  `Foto` LONGBLOB NULL COMMENT 'Fotografía del asesor',
  `Limite` TINYINT(5) UNSIGNED NULL DEFAULT 5 COMMENT 'Limite de asesorias del asesorado',
  `ApellidoPaterno` VARCHAR(45) NOT NULL COMMENT 'Apellido Paterno del Asesorado',
  `ApellidoMaterno` VARCHAR(45) NULL COMMENT 'Apellido Materno del Asesorado',
  `NombreCompleto` VARCHAR(200) GENERATED ALWAYS AS (CONCAT(Nombre,' ',ApellidoPaterno,' ', ApellidoMaterno)) VIRTUAL COMMENT 'Nombre completo del Asesorado.',
  PRIMARY KEY (`Id_asesorado`),
  UNIQUE INDEX `idAsesorado_UNIQUE` (`Id_asesorado` ASC),
  INDEX `fk_Asesorado_Nombre_Carrera1_idx` (`asesorado_idNombre_Carrera` ASC),
  CONSTRAINT `fk_Asesorado_Nombre_Carrera1`
    FOREIGN KEY (`asesorado_idNombre_Carrera`)
    REFERENCES `SAPDAE`.`Nombre_Carrera` (`idNombre_Carrera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Asesor_Hora_Inicio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Asesor_Hora_Inicio` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Asesor_Hora_Inicio` (
  `Id_inicio` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificado de las Horas de inicio de Asesoría, autoincrementable',
  `Asesor_idAsesor` INT UNSIGNED NOT NULL COMMENT 'Identificador del Asesor',
  `AsesorHora_Ini` TIME(6) NOT NULL COMMENT 'Hora de inicio de las Asesorias, Formato HH:MM:SS',
  PRIMARY KEY (`Id_inicio`),
  CONSTRAINT `fk_table1_Asesor2`
    FOREIGN KEY (`Asesor_idAsesor`)
    REFERENCES `SAPDAE`.`Asesores` (`Id_asesor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Asesor_Hora_Fin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Asesor_Hora_Fin` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Asesor_Hora_Fin` (
  `Id_fin` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador de Hora de finalización de Asesoría, autoincrementable',
  `Asesor_idAsesor` INT UNSIGNED NOT NULL COMMENT 'Llave foranea indicadora de que es perteneciente al Asesor',
  `AsesorHora_Fin` TIME(6) NOT NULL COMMENT 'Hora de finalización de Asesoría, HH:MM:SS',
  PRIMARY KEY (`Id_fin`),
  CONSTRAINT `fk_table2_Asesor1`
    FOREIGN KEY (`Asesor_idAsesor`)
    REFERENCES `SAPDAE`.`Asesores` (`Id_asesor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Fecha_Asesor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Fecha_Asesor` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Fecha_Asesor` (
  `id_Fecha` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador de la fecha, con Autoincremento.',
  `Asesor_idAsesor` INT UNSIGNED NOT NULL COMMENT 'Llave Foranea indicador de que pertenece al usuario Asesor',
  `FechaAsesoria` VARCHAR(10) NOT NULL COMMENT 'Fecha de Asesoria, Puede ser Lunes, Martes, Miercoles, Jueves, Viernes o Sabado.',
  PRIMARY KEY (`id_Fecha`),
  CONSTRAINT `fk_table1_Asesor1`
    FOREIGN KEY (`Asesor_idAsesor`)
    REFERENCES `SAPDAE`.`Asesores` (`Id_asesor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Nombre_Materia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Nombre_Materia` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Nombre_Materia` (
  `Id_mat` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador de la materia, se autoincrementa.',
  `Nombre_Carrera_idNombre_Carrera` INT NOT NULL COMMENT 'Identificador del nombre de la Carrera a la que pertenece la materia.',
  `Materia` VARCHAR(30) NULL COMMENT 'Nombre de la materia',
  PRIMARY KEY (`Id_mat`),
  INDEX `fk_Nombre_Materia_Nombre_Carrera1_idx` (`Nombre_Carrera_idNombre_Carrera` ASC),
  CONSTRAINT `fk_Nombre_Materia_Nombre_Carrera1`
    FOREIGN KEY (`Nombre_Carrera_idNombre_Carrera`)
    REFERENCES `SAPDAE`.`Nombre_Carrera` (`idNombre_Carrera`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Materias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Materias` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Materias` (
  `Id_Nombremat` INT UNSIGNED NOT NULL COMMENT 'Identificador de la materia, tomandose como llave primaria y foranea en base a la tabla Nombre_Materia.',
  `Asesor_idAsesor` INT UNSIGNED NOT NULL COMMENT 'Llave Foranea identificadora del asesor al que pertenece la materia',
  INDEX `fk_Materias_Asesor1_idx` (`Asesor_idAsesor` ASC),
  INDEX `fk_Materias_Nombre_Materia1_idx` (`Id_Nombremat` ASC),
  PRIMARY KEY (`Id_Nombremat`),
  CONSTRAINT `fk_Materias_Asesor1`
    FOREIGN KEY (`Asesor_idAsesor`)
    REFERENCES `SAPDAE`.`Asesores` (`Id_asesor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Materias_Nombre_Materia1`
    FOREIGN KEY (`Id_Nombremat`)
    REFERENCES `SAPDAE`.`Nombre_Materia` (`Id_mat`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Horario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Horario` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Horario` (
  `idHorario` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Llave identificadora del Horario, se autoincrementa.',
  `Asesor_idAsesor` INT UNSIGNED NOT NULL COMMENT 'Llave foranea del Asesor al que corresponde el horario',
  `Fecha_idFecha` INT NOT NULL COMMENT 'Llave foranea al que le corresponde la fecha ',
  `AsesorHorInic_idAsesorHorInic` INT UNSIGNED NOT NULL COMMENT 'Llave foranea que indica la hora de inicio de la asesoria',
  `AsesorHoraFin_idAsesorHoraFin` INT UNSIGNED NOT NULL COMMENT 'Llave foranea que indica el final de la hora de asesoria.',
  `Materias_Id_Nombremat` INT UNSIGNED NOT NULL COMMENT 'Llave foranea que indica el nombre de la materia de la asesoria',
  PRIMARY KEY (`idHorario`),
  INDEX `fk_Horario_Asesor1_idx` (`Asesor_idAsesor` ASC),
  INDEX `fk_Horario_AsesorHorInici1_idx` (`AsesorHorInic_idAsesorHorInic` ASC),
  INDEX `fk_Horario_AsesorHoraFin1_idx` (`AsesorHoraFin_idAsesorHoraFin` ASC),
  INDEX `fk_Horario_Fecha_Asesor1_idx` (`Fecha_idFecha` ASC),
  INDEX `fk_Horario_Materias1_idx` (`Materias_Id_Nombremat` ASC),
  CONSTRAINT `fk_Horario_Asesor1`
    FOREIGN KEY (`Asesor_idAsesor`)
    REFERENCES `SAPDAE`.`Asesores` (`Id_asesor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Horario_AsesorHorInici1`
    FOREIGN KEY (`AsesorHorInic_idAsesorHorInic`)
    REFERENCES `SAPDAE`.`Asesor_Hora_Inicio` (`Id_inicio`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Horario_AsesorHoraFin1`
    FOREIGN KEY (`AsesorHoraFin_idAsesorHoraFin`)
    REFERENCES `SAPDAE`.`Asesor_Hora_Fin` (`Id_fin`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Horario_Fecha_Asesor1`
    FOREIGN KEY (`Fecha_idFecha`)
    REFERENCES `SAPDAE`.`Fecha_Asesor` (`id_Fecha`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Horario_Materias1`
    FOREIGN KEY (`Materias_Id_Nombremat`)
    REFERENCES `SAPDAE`.`Materias` (`Id_Nombremat`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Solicitud`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Solicitud` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Solicitud` (
  `Id_solicitud` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador de la solicitud, se autoincrementa',
  `Horario_idHorario` INT UNSIGNED NOT NULL COMMENT 'Llave foránea que indica al identificador del Horario del asesor.',
  `Asesorado_Id_asesorado` INT UNSIGNED NOT NULL COMMENT 'Llave foranea que indica el identificador del asesorado que realiza la solicitud de aasesoria',
  `Estado` TINYINT(1) NOT NULL COMMENT 'Fila Booleana que indica el estado de la solicitud realizada por el asesorado, Aceptado o no aceptado',
  PRIMARY KEY (`Id_solicitud`),
  INDEX `fk_Solicitud_Horario1_idx` (`Horario_idHorario` ASC),
  INDEX `fk_Solicitud_Asesorado1_idx` (`Asesorado_Id_asesorado` ASC),
  CONSTRAINT `fk_Solicitud_Horario1`
    FOREIGN KEY (`Horario_idHorario`)
    REFERENCES `SAPDAE`.`Horario` (`idHorario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Solicitud_Asesorado1`
    FOREIGN KEY (`Asesorado_Id_asesorado`)
    REFERENCES `SAPDAE`.`Asesorado` (`Id_asesorado`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Relacion_Asesor_Asesorados`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Relacion_Asesor_Asesorados` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Relacion_Asesor_Asesorados` (
  `Asesor_idAsesor` INT UNSIGNED NOT NULL COMMENT 'Llave foranea que referencia al asesor en relacion de sus asesorados.',
  `Asesorado_idAsesorado` INT UNSIGNED NOT NULL COMMENT 'Llave foranea que referencia al asesorado y su asesor.',
  INDEX `fk_Asesor_has_Asesorado_Asesorado1_idx` (`Asesorado_idAsesorado` ASC),
  INDEX `fk_Asesor_has_Asesorado_Asesor1_idx` (`Asesor_idAsesor` ASC),
  CONSTRAINT `fk_Asesor_has_Asesorado_Asesor1`
    FOREIGN KEY (`Asesor_idAsesor`)
    REFERENCES `SAPDAE`.`Asesores` (`Id_asesor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Asesor_has_Asesorado_Asesorado1`
    FOREIGN KEY (`Asesorado_idAsesorado`)
    REFERENCES `SAPDAE`.`Asesorado` (`Id_asesorado`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Telefono_Asesor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Telefono_Asesor` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Telefono_Asesor` (
  `Asesor_idAsesor` INT UNSIGNED NOT NULL COMMENT 'Llave foranea que lo identifica con el asesor',
  `Telefono` VARCHAR(10) NOT NULL COMMENT 'Telefono del asesor, puede tener más de un telefono',
  INDEX `fk_Telefono_Asesor_Asesor1_idx` (`Asesor_idAsesor` ASC),
  CONSTRAINT `fk_Telefono_Asesor_Asesor1`
    FOREIGN KEY (`Asesor_idAsesor`)
    REFERENCES `SAPDAE`.`Asesores` (`Id_asesor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Correo_Asesor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Correo_Asesor` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Correo_Asesor` (
  `Asesor_idAsesor` INT UNSIGNED NOT NULL COMMENT 'Llave foranea que lo identifica con el Asesor',
  `Correo` VARCHAR(50) NULL COMMENT 'Correo electrónico, puede tener más de uno\n',
  CONSTRAINT `fk_CorreoAsesor_Asesor1`
    FOREIGN KEY (`Asesor_idAsesor`)
    REFERENCES `SAPDAE`.`Asesores` (`Id_asesor`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Correo_Asesorado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Correo_Asesorado` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Correo_Asesorado` (
  `Asesorado_idAsesorado` INT UNSIGNED NOT NULL COMMENT 'Identificador del asesorado, este puede tener más de un correo electronico',
  `Correo` VARCHAR(50) NULL COMMENT 'Correo electronico del asesorado',
  CONSTRAINT `fk_table1_Asesorado1`
    FOREIGN KEY (`Asesorado_idAsesorado`)
    REFERENCES `SAPDAE`.`Asesorado` (`Id_asesorado`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Tel_Asesorado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Tel_Asesorado` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Tel_Asesorado` (
  `Asesorado_idAsesorado` INT UNSIGNED NOT NULL COMMENT 'Identificador del Asesorado, puede tener más de un telefono',
  `Telefono` VARCHAR(10) NULL COMMENT 'Telefono del asesorado',
  CONSTRAINT `fk_table3_Asesorado1`
    FOREIGN KEY (`Asesorado_idAsesorado`)
    REFERENCES `SAPDAE`.`Asesorado` (`Id_asesorado`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAPDAE`.`Administrador`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SAPDAE`.`Administrador` ;

CREATE TABLE IF NOT EXISTS `SAPDAE`.`Administrador` (
  `idAdministrador` INT UNSIGNED NOT NULL COMMENT 'Identificador del Administrador dentro del sistema',
  `Contraseña` VARCHAR(16) NOT NULL COMMENT 'Contraseña del Administrador dentro del sistema',
  PRIMARY KEY (`idAdministrador`))
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
